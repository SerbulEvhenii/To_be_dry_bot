import datetime
import threading
import os
import bot_schedule
import db_postgreSQL as db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import weather_api  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
import telebot.types  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ç–µ–ª–µ–≥—Ä–∞–º–∞ API
import markups  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–∞
import inlineKeyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–∞–≤–∏–∞—Ç—É—Ä—ã
import emoji  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–º–∞–π–ª—ã http://www.unicode.org/emoji/charts/full-emoji-list.html
from flask import Flask, request, abort, jsonify, Response
from telebot import types, TeleBot
import config


URL = 'https://bot-to-be-dry.herokuapp.com/'
bot = TeleBot(config.TOKEN, threaded=False)         # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
app = Flask(__name__)                               # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞


@app.route('/')
def index():
    return '<h1>Telegram BOT - To be dry. –ü–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç by Serbul Evhenii</h1>', 200

@app.route("/wakemydyno.txt")    # http://wakemydyno.com/ - –Ω–µ –¥–∞–µ–º –∑–∞—Å–Ω—É—Ç—å dyno
def get_text():
    content = 'Test ping Heroku'
    return Response(content, mimetype="text/plain")


@app.route('/' + config.TOKEN, methods=["POST"])
def webhook():
    bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))])
    # json_string = request.stream.read().decode('utf-8')
    # update = types.Update.de_json(json.load(json_string), bot)
    # bot.process_new_updates(update)
    return "ok", 200


@bot.message_handler(commands=['start'])
# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç /start
def send_welcome(message):
    if db.check_in_db(column='user_id', data_check=message.chat.id):
        bot.send_message(message.chat.id, f'–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, {message.chat.first_name} ü§öüèº',
                         reply_markup=markups.markup_main)
    else:
        db.add_user_in_db(user_name=message.chat.username, user_id=message.chat.id)
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name} ü§öüèº\n'
                         f'–Ø –ø–æ–≥–æ–¥–Ω—ã–π –ë–æ—Ç! –Ø –±—É–¥—É –æ–ø–æ–≤–µ—â–∞—Ç—å —Ç–µ–±—è, –µ—Å–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ '
                         f'–¥–æ–∂–¥—å.', reply_markup=markups.markup_main)


@bot.message_handler(commands=['subs'])
# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç /subs
def subscribe(message):
    if db.check_subscribe_db(user_id=message.chat.id):
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.')
    else:
        db.subscribe_db(user_id=message.chat.id)
        bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è –ø–æ–∫–∞–∑—ã–≤–∞—é '
                                          '–ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ö–∏–µ–≤–∞. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.')


@bot.message_handler(commands=['unsubs'])
# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç /unsubs
def unsubscribe(message):
    db.unsubscribe_db(user_id=message.chat.id)
    bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.')


@bot.message_handler(commands=['users'])
# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç /users
def admin_count_users(message):
    users = db.count_users()
    bot.send_message(message.chat.id, f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {users}')


def notify_weather():
    time_now = datetime.datetime.now().strftime('%H:%M')
    list_tuples_id_users = db.list_id_users_in_db()
    list_id_users = []
    for tuple_in_list in list_tuples_id_users:
        list_id_users.append(tuple_in_list[1])
    for user_id_in_list in list_id_users:
        if db.get_time_notify_user_db(user_id=user_id_in_list) == time_now and db.check_subscribe_db(user_id=user_id_in_list):
            bot.send_message(chat_id=user_id_in_list, text=weather_api.show_current_daily_weather(user_id_in_list))


# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç /time
def set_time_notify_in_db(callback_query, time):
    time_notify = time
    db.set_time_notify(user_id=callback_query.from_user.id, time=time_notify)


def set_time_notify_in_db_text_message_user(user_id, time):
    time_notify = time
    db.set_time_notify(user_id=user_id, time=time_notify)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2—Ö –∫–Ω–æ–ø–æ–∫ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞": –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
def start_menu_settings(message):
    bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', reply_markup=inlineKeyboard.inline_kb_settings)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±–æ—Ä–∞
def start_menu_all_times(callback_query):
    bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è, –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
                     reply_markup=inlineKeyboard.inline_kb_all_times)


# # –†–µ–∞–∫—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
# @bot.callback_query_handler(func=lambda c: c.data and c.data.startswith('menu'))
# def set_time_notify_menu(callback_query: telebot.types.CallbackQuery):
#     if callback_query.data == 'menu_btn_geo':
#         bot.answer_callback_query(callback_query.id)
#         bot.send_message(callback_query.from_user.id, '–ü–µ—Ä–µ–¥–∞—á–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
#     elif callback_query.data == 'menu_btn_notify':
#         bot.answer_callback_query(callback_query.id)
#         start_menu_all_times(callback_query)


# –†–µ–∞–∫—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith('menu'))
def set_time_notify_menu(callback_query: telebot.types.CallbackQuery):
    if callback_query.data == 'menu_btn_geo':
        bot.answer_callback_query(callback_query.id)
        bot.send_message(callback_query.from_user.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:')
        get_geo_position(callback_query)
    elif callback_query.data == 'menu_btn_notify':
        bot.answer_callback_query(callback_query.id)
        start_menu_all_times(callback_query)


def get_geo_position(callback_query):
    city = weather_api.get_geo_city(callback_query.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text=emoji.emojize(":compass: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"), request_location=True)
    button_main_menu = types.KeyboardButton(text=emoji.emojize(":gear: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    keyboard.add(button_geo, button_main_menu)
    bot.send_message(callback_query.from_user.id, emoji.emojize(f":house: –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫: {city}.\n"
                                                  f"‚Åâ –ß—Ç–æ–±—ã —è –º–æ–≥ –∑–∞–ø–æ–º–Ω–∏—Ç—å –¥–ª—è –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ "
                                                  f"–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É, –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ "
                                                  f"–æ–¥–∏–Ω —Ä–∞–∑ –∏ —è –∑–∞–ø–æ–º–Ω—é. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ "
                                                  f"'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' –≤–∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
                                                  f"GPS (–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)."),
                                                  reply_markup=keyboard)


# –†–µ–∞–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith('btn'))
def set_time_notify_menu(callback_query: telebot.types.CallbackQuery):
    if callback_query.data == 'btn_edit':
        msg = bot.send_message(callback_query.from_user.id,
                               '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: 07:00')
        bot.register_next_step_handler(msg, time_user)
    else:
        for time in inlineKeyboard.btn_tuple_data:
            if callback_query.data == time:
                bot.answer_callback_query(callback_query.id)
                db.set_time_notify(user_id=callback_query.from_user.id, time=callback_query.data[3:])
                bot.send_message(callback_query.from_user.id, f'–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {callback_query.data[3:]}')


def time_user(message):
    id = message.chat.id
    text = message.text
    set_time_notify_in_db_text_message_user(id, text)
    bot.send_message(id, f'–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {text}.')


@bot.message_handler(content_types=["location"])
def location(message):
    if message.location is not None:
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "
                                          "–ø–æ–≥–æ–¥—É –¥–ª—è —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞.",
                                          reply_markup=markups.markup_main)
        db.set_geoposition(user_id=message.chat.id, latit=message.location.latitude, long=message.location.longitude)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    text = message.text.lower()
    if '–ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞' in text:
        bot.send_chat_action(chat_id=message.chat.id, action='typing')  # –∞–Ω–∏–º–∞—Ü–∏—è "–ü–µ—á–∞—Ç–∞–µ—Ç..."
        bot.send_message(message.chat.id, weather_api.show_tomorrow_weather(message.chat.id))
    elif '–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å' in text:
        bot.send_chat_action(chat_id=message.chat.id, action='typing')
        bot.send_message(message.chat.id, weather_api.show_current_weather(message.chat.id))
        db.get_geoposition(user_id=message.chat.id)
    elif '–ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è' in text:
        bot.send_chat_action(chat_id=message.chat.id, action='typing')
        bot.send_message(message.chat.id, weather_api.show_current_daily_weather(message.chat.id))
    elif '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in text:
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markups.markup_main)
    elif '–≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' in text:
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: 07:00')
        bot.register_next_step_handler(msg, time_user)
    #     bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: 07:00')
    #     msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: 07:00')
    #     bot.register_next_step_handler(msg, set_time_notify_in_db_text_message(time=message.text))
    #     set_time_notify_in_db_text_message(message_2.chat.id, time=message_2.text)
    elif '–∫–∞–∫ –¥–µ–ª–∞?' in text:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ. –ê —Ç–≤–æ–∏ –∫–∞–∫?')
    elif '–ø–æ–º–æ—â—å' in text:
        bot.send_message(message.chat.id, '–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')
    elif '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞' in text:
        start_menu_settings(message)
    elif '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' in text:
        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å
        if db.check_in_db(column='user_id', data_check=message.chat.id):
            subscribe(message)
        else:
            db.add_user_in_db(user_name=message.chat.username, user_id=message.chat.id)
            subscribe(message)
    elif '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è' in text:
        if db.check_in_db(column='user_id', data_check=message.chat.id):
            unsubscribe(message)
        else:
            bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')
    elif '–æ—à–∏–±–∫–∞' in text or '/help' in text or 'help' in text or '–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞' in text:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(emoji.emojize(':pencil: –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑–∞–±–æ—Ç—á–∏–∫—É'),
                                                        url='telegram.me/serbul_evhenii'))
        bot.send_message(message.chat.id,
                         f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –í—ã –Ω–∞—à–ª–∏ –±–∞–≥ –≤ –±–æ—Ç–µ, —Å–æ–æ–±—â–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                         reply_markup=keyboard)
    else:
        pass


@bot.message_handler(content_types=['photo'])
def text_handler(message):
    bot.send_message(message.chat.id, '–í–∞—É, –∫—Ä–∞—Å–∏–≤–æ!')


def runBotServerFlask():  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Flask
    print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞...')
    db.init_db()
    print('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω...')
    bot.set_webhook(url=URL + config.TOKEN)
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))

#
# def runSchedulers():
#     print('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...')
#     while True:
#         schedule.run_pending()
#         time.sleep(1)

def runBotHome():
    bot.remove_webhook()
    db.init_db()
    print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞...')
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.polling(none_stop=True)

def runSchedulers():
    bot_schedule.start_schedule()



# –¥–æ–º
# if __name__ == '__main__':
#     t1 = threading.Thread(target=runBotHome)
#     t2 = threading.Thread(target=runSchedulers)
#     t1.start()
#     t2.start()

# if __name__ == "__main__":
#     db.init_db()
#     print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞...')
#     app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))

# Heroku
if __name__ == '__main__':
    t1 = threading.Thread(target=runBotServerFlask)
    t2 = threading.Thread(target=runSchedulers)
    t1.start()
    t2.start()


